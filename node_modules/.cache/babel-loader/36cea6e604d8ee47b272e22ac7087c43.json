{"ast":null,"code":"import schema from '@uniswap/token-lists/src/tokenlist.schema.json';\nimport Ajv from 'ajv';\nimport contenthashToUri from './contenthashToUri';\nimport { parseENSAddress } from './parseENSAddress';\nimport uriToHttp from './uriToHttp'; // bakeryswap defaultTokenJson\n\nimport { DEFAULT_TOKEN_LIST_URL } from '../constants/lists';\nimport defaultTokenJson from '../constants/token/pancakeswap.json';\nconst tokenListValidator = new Ajv({\n  allErrors: true\n}).compile(schema);\n/**\r\n * Contains the logic for resolving a list URL to a validated token list\r\n * @param listUrl list url\r\n * @param resolveENSContentHash resolves an ens name to a contenthash\r\n */\n\nexport default async function getTokenList(listUrl, resolveENSContentHash) {\n  if (listUrl === DEFAULT_TOKEN_LIST_URL) {\n    return defaultTokenJson;\n  }\n\n  const parsedENS = parseENSAddress(listUrl);\n  let urls;\n\n  if (parsedENS) {\n    var _parsedENS$ensPath;\n\n    let contentHashUri;\n\n    try {\n      contentHashUri = await resolveENSContentHash(parsedENS.ensName);\n    } catch (error) {\n      console.error(`Failed to resolve ENS name: ${parsedENS.ensName}`, error);\n      throw new Error(`Failed to resolve ENS name: ${parsedENS.ensName}`);\n    }\n\n    let translatedUri;\n\n    try {\n      translatedUri = contenthashToUri(contentHashUri);\n    } catch (error) {\n      console.error('Failed to translate contenthash to URI', contentHashUri);\n      throw new Error(`Failed to translate contenthash to URI: ${contentHashUri}`);\n    }\n\n    urls = uriToHttp(`${translatedUri}${(_parsedENS$ensPath = parsedENS.ensPath) !== null && _parsedENS$ensPath !== void 0 ? _parsedENS$ensPath : ''}`);\n  } else {\n    urls = uriToHttp(listUrl);\n  }\n\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i];\n    const isLast = i === urls.length - 1;\n    let response;\n\n    try {\n      response = await fetch(url);\n    } catch (error) {\n      console.error('Failed to fetch list', listUrl, error);\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`); // eslint-disable-next-line no-continue\n\n      continue;\n    }\n\n    if (!response.ok) {\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`); // eslint-disable-next-line no-continue\n\n      continue;\n    }\n\n    const json = await response.json();\n\n    if (!tokenListValidator(json)) {\n      var _tokenListValidator$e, _tokenListValidator$e2;\n\n      const validationErrors = (_tokenListValidator$e = (_tokenListValidator$e2 = tokenListValidator.errors) === null || _tokenListValidator$e2 === void 0 ? void 0 : _tokenListValidator$e2.reduce((memo, error) => {\n        var _error$message;\n\n        const add = `${error.dataPath} ${(_error$message = error.message) !== null && _error$message !== void 0 ? _error$message : ''}`;\n        return memo.length > 0 ? `${memo}; ${add}` : `${add}`;\n      }, '')) !== null && _tokenListValidator$e !== void 0 ? _tokenListValidator$e : 'unknown error';\n      throw new Error(`Token list failed validation: ${validationErrors}`);\n    }\n\n    return json;\n  }\n\n  throw new Error('Unrecognized list URL protocol.');\n}","map":{"version":3,"sources":["C:/PROYECTOS/CACAO-swap/src/utils/getTokenList.ts"],"names":["schema","Ajv","contenthashToUri","parseENSAddress","uriToHttp","DEFAULT_TOKEN_LIST_URL","defaultTokenJson","tokenListValidator","allErrors","compile","getTokenList","listUrl","resolveENSContentHash","parsedENS","urls","contentHashUri","ensName","error","console","Error","translatedUri","ensPath","i","length","url","isLast","response","fetch","ok","json","validationErrors","errors","reduce","memo","add","dataPath","message"],"mappings":"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","sourcesContent":["import { TokenList } from '@uniswap/token-lists'\r\nimport schema from '@uniswap/token-lists/src/tokenlist.schema.json'\r\nimport Ajv from 'ajv'\r\nimport contenthashToUri from './contenthashToUri'\r\nimport { parseENSAddress } from './parseENSAddress'\r\nimport uriToHttp from './uriToHttp'\r\n\r\n// bakeryswap defaultTokenJson\r\nimport { DEFAULT_TOKEN_LIST_URL } from '../constants/lists'\r\nimport defaultTokenJson from '../constants/token/pancakeswap.json'\r\n\r\nconst tokenListValidator = new Ajv({ allErrors: true }).compile(schema)\r\n\r\n/**\r\n * Contains the logic for resolving a list URL to a validated token list\r\n * @param listUrl list url\r\n * @param resolveENSContentHash resolves an ens name to a contenthash\r\n */\r\nexport default async function getTokenList(\r\n  listUrl: string,\r\n  resolveENSContentHash: (ensName: string) => Promise<string>\r\n): Promise<TokenList> {\r\n  if (listUrl === DEFAULT_TOKEN_LIST_URL) {\r\n    return defaultTokenJson\r\n  }\r\n  const parsedENS = parseENSAddress(listUrl)\r\n\r\n  let urls: string[]\r\n  if (parsedENS) {\r\n    let contentHashUri\r\n    try {\r\n      contentHashUri = await resolveENSContentHash(parsedENS.ensName)\r\n    } catch (error) {\r\n      console.error(`Failed to resolve ENS name: ${parsedENS.ensName}`, error)\r\n      throw new Error(`Failed to resolve ENS name: ${parsedENS.ensName}`)\r\n    }\r\n    let translatedUri\r\n    try {\r\n      translatedUri = contenthashToUri(contentHashUri)\r\n    } catch (error) {\r\n      console.error('Failed to translate contenthash to URI', contentHashUri)\r\n      throw new Error(`Failed to translate contenthash to URI: ${contentHashUri}`)\r\n    }\r\n    urls = uriToHttp(`${translatedUri}${parsedENS.ensPath ?? ''}`)\r\n  } else {\r\n    urls = uriToHttp(listUrl)\r\n  }\r\n  for (let i = 0; i < urls.length; i++) {\r\n    const url = urls[i]\r\n    const isLast = i === urls.length - 1\r\n    let response\r\n    try {\r\n      response = await fetch(url)\r\n    } catch (error) {\r\n      console.error('Failed to fetch list', listUrl, error)\r\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`)\r\n      // eslint-disable-next-line no-continue\r\n      continue\r\n    }\r\n\r\n    if (!response.ok) {\r\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`)\r\n      // eslint-disable-next-line no-continue\r\n      continue\r\n    }\r\n\r\n    const json = await response.json()\r\n    if (!tokenListValidator(json)) {\r\n      const validationErrors: string =\r\n        tokenListValidator.errors?.reduce<string>((memo, error) => {\r\n          const add = `${error.dataPath} ${error.message ?? ''}`\r\n          return memo.length > 0 ? `${memo}; ${add}` : `${add}`\r\n        }, '') ?? 'unknown error'\r\n      throw new Error(`Token list failed validation: ${validationErrors}`)\r\n    }\r\n    return json\r\n  }\r\n  throw new Error('Unrecognized list URL protocol.')\r\n}\r\n"]},"metadata":{},"sourceType":"module"}