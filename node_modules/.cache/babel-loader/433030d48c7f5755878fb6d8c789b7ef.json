{"ast":null,"code":"var _jsxFileName = \"C:\\\\PROYECTOS\\\\CACAO-swap\\\\src\\\\components\\\\ProgressSteps\\\\index.tsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { transparentize } from 'polished';\nimport { RowBetween } from '../Row';\nimport { AutoColumn } from '../Column';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled(AutoColumn)`\n  margin-top: 1.25rem;\n`;\n_c = Wrapper;\nconst Grouping = styled(RowBetween)`\n  width: 50%;\n`;\n_c2 = Grouping;\nconst Circle = styled.div`\n  min-width: 20px;\n  min-height: 20px;\n  background-color: ${({\n  theme,\n  confirmed,\n  disabled\n}) => disabled ? theme.colors.backgroundDisabled : confirmed ? theme.colors.success : theme.colors.primary};\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  line-height: 8px;\n  font-size: 12px;\n  color: ${({\n  theme,\n  confirmed,\n  disabled\n}) => disabled ? theme.colors.text : confirmed ? theme.colors.success : '#FFFFFF'};\n`;\n_c3 = Circle;\nconst CircleRow = styled.div`\n  width: calc(100% - 20px);\n  display: flex;\n  align-items: center;\n`;\n_c4 = CircleRow;\nconst Connector = styled.div`\n  width: 100%;\n  height: 2px;\n  background-color: ;\n  background: linear-gradient(\n    90deg,\n    ${({\n  theme,\n  prevConfirmed\n}) => transparentize(0.5, prevConfirmed ? theme.colors.success : theme.colors.primary)} 0%,\n    ${({\n  theme,\n  prevConfirmed\n}) => prevConfirmed ? theme.colors.primary : theme.colors.backgroundDisabled} 80%\n  );\n  opacity: 0.6;\n`;\n_c5 = Connector;\n\n/**\r\n * Based on array of steps, create a step counter of circles.\r\n * A circle can be enabled, disabled, or confirmed. States are derived\r\n * from previous step.\r\n *\r\n * An extra circle is added to represent the ability to swap, add, or remove.\r\n * This step will never be marked as complete (because no 'txn done' state in body ui).\r\n *\r\n * @param steps  array of booleans where true means step is complete\r\n */\nexport default function ProgressCircles({\n  steps\n}) {\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    justify: \"center\",\n    children: /*#__PURE__*/_jsxDEV(Grouping, {\n      children: [steps.map((step, i) => {\n        return (\n          /*#__PURE__*/\n          // eslint-disable-next-line react/no-array-index-key\n          _jsxDEV(CircleRow, {\n            children: [/*#__PURE__*/_jsxDEV(Circle, {\n              confirmed: step,\n              disabled: !steps[i - 1] && i !== 0,\n              children: step ? '✓' : i + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Connector, {\n              prevConfirmed: step\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 15\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)\n        );\n      }), /*#__PURE__*/_jsxDEV(Circle, {\n        disabled: !steps[steps.length - 1],\n        children: steps.length + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_c6 = ProgressCircles;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"Grouping\");\n$RefreshReg$(_c3, \"Circle\");\n$RefreshReg$(_c4, \"CircleRow\");\n$RefreshReg$(_c5, \"Connector\");\n$RefreshReg$(_c6, \"ProgressCircles\");","map":{"version":3,"sources":["C:/PROYECTOS/CACAO-swap/src/components/ProgressSteps/index.tsx"],"names":["React","styled","transparentize","RowBetween","AutoColumn","Wrapper","Grouping","Circle","div","theme","confirmed","disabled","colors","backgroundDisabled","success","primary","text","CircleRow","Connector","prevConfirmed","ProgressCircles","steps","map","step","i","length"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { transparentize } from 'polished'\r\nimport { RowBetween } from '../Row'\r\nimport { AutoColumn } from '../Column'\r\n\r\nconst Wrapper = styled(AutoColumn)`\r\n  margin-top: 1.25rem;\r\n`\r\n\r\nconst Grouping = styled(RowBetween)`\r\n  width: 50%;\r\n`\r\n\r\nconst Circle = styled.div<{ confirmed?: boolean; disabled?: boolean }>`\r\n  min-width: 20px;\r\n  min-height: 20px;\r\n  background-color: ${({ theme, confirmed, disabled }) =>\r\n    disabled ? theme.colors.backgroundDisabled : confirmed ? theme.colors.success : theme.colors.primary};\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  line-height: 8px;\r\n  font-size: 12px;\r\n  color: ${({ theme, confirmed, disabled }) =>\r\n    disabled ? theme.colors.text : confirmed ? theme.colors.success : '#FFFFFF'};\r\n`\r\n\r\nconst CircleRow = styled.div`\r\n  width: calc(100% - 20px);\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Connector = styled.div<{ prevConfirmed?: boolean }>`\r\n  width: 100%;\r\n  height: 2px;\r\n  background-color: ;\r\n  background: linear-gradient(\r\n    90deg,\r\n    ${({ theme, prevConfirmed }) => transparentize(0.5, prevConfirmed ? theme.colors.success : theme.colors.primary)} 0%,\r\n    ${({ theme, prevConfirmed }) => (prevConfirmed ? theme.colors.primary : theme.colors.backgroundDisabled)} 80%\r\n  );\r\n  opacity: 0.6;\r\n`\r\n\r\ninterface ProgressCirclesProps {\r\n  steps: boolean[]\r\n}\r\n\r\n/**\r\n * Based on array of steps, create a step counter of circles.\r\n * A circle can be enabled, disabled, or confirmed. States are derived\r\n * from previous step.\r\n *\r\n * An extra circle is added to represent the ability to swap, add, or remove.\r\n * This step will never be marked as complete (because no 'txn done' state in body ui).\r\n *\r\n * @param steps  array of booleans where true means step is complete\r\n */\r\nexport default function ProgressCircles({ steps }: ProgressCirclesProps) {\r\n  return (\r\n    <Wrapper justify=\"center\">\r\n      <Grouping>\r\n        {steps.map((step, i) => {\r\n          return (\r\n            // eslint-disable-next-line react/no-array-index-key\r\n            <CircleRow key={i}>\r\n              <Circle confirmed={step} disabled={!steps[i - 1] && i !== 0}>\r\n                {step ? '✓' : i + 1}\r\n              </Circle>\r\n              <Connector prevConfirmed={step} />\r\n            </CircleRow>\r\n          )\r\n        })}\r\n        <Circle disabled={!steps[steps.length - 1]}>{steps.length + 1}</Circle>\r\n      </Grouping>\r\n    </Wrapper>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}