{"ast":null,"code":"var _jsxFileName = \"C:\\\\PROYECTOS\\\\CACAO-swap\\\\src\\\\components\\\\ToastListener\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { ToastContainer } from '@pancakeswap-libs/uikit';\nimport useToast from 'hooks/useToast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ToastListener = () => {\n  _s();\n\n  const toasts = useSelector(state => state.toasts.data);\n  const {\n    remove\n  } = useToast();\n\n  const handleRemove = id => remove(id);\n\n  return /*#__PURE__*/_jsxDEV(ToastContainer, {\n    toasts: toasts,\n    onRemove: handleRemove\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 10\n  }, this);\n};\n\n_s(ToastListener, \"TlDUCwx4oGIGO5M9FYOQmt33zxc=\", false, function () {\n  return [useSelector, useToast];\n});\n\n_c = ToastListener;\nexport default ToastListener;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToastListener\");","map":{"version":3,"sources":["C:/PROYECTOS/CACAO-swap/src/components/ToastListener/index.tsx"],"names":["React","useSelector","ToastContainer","useToast","ToastListener","toasts","state","data","remove","handleRemove","id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,cAAT,QAAsC,yBAAtC;AACA,OAAOC,QAAP,MAAqB,gBAArB;;;AAGA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAC1B,QAAMC,MAAe,GAAGJ,WAAW,CAAEK,KAAD,IAAqBA,KAAK,CAACD,MAAN,CAAaE,IAAnC,CAAnC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAaL,QAAQ,EAA3B;;AAEA,QAAMM,YAAY,GAAIC,EAAD,IAAgBF,MAAM,CAACE,EAAD,CAA3C;;AAEA,sBAAO,QAAC,cAAD;AAAgB,IAAA,MAAM,EAAEL,MAAxB;AAAgC,IAAA,QAAQ,EAAEI;AAA1C;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAPD;;GAAML,a;UACoBH,W,EACLE,Q;;;KAFfC,a;AASN,eAAeA,aAAf","sourcesContent":["import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { ToastContainer, Toast } from '@pancakeswap-libs/uikit'\r\nimport useToast from 'hooks/useToast'\r\nimport { AppState } from '../../state'\r\n\r\nconst ToastListener = () => {\r\n  const toasts: Toast[] = useSelector((state: AppState) => state.toasts.data)\r\n  const { remove } = useToast()\r\n\r\n  const handleRemove = (id: string) => remove(id)\r\n\r\n  return <ToastContainer toasts={toasts} onRemove={handleRemove} />\r\n}\r\n\r\nexport default ToastListener\r\n"]},"metadata":{},"sourceType":"module"}