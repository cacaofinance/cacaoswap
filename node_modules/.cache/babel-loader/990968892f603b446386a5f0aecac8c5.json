{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useAddPopup, useBlockNumber } from '../application/hooks';\nimport { checkedTransaction, finalizeTransaction } from './actions';\nexport function shouldCheck(lastBlockNumber, tx) {\n  if (tx.receipt) return false;\n  if (!tx.lastCheckedBlockNumber) return true;\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber;\n  if (blocksSinceCheck < 1) return false;\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60;\n\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9;\n  }\n\n  if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2;\n  } // otherwise every block\n\n\n  return true;\n}\nexport default function Updater() {\n  _s();\n\n  var _state$chainId;\n\n  const {\n    chainId,\n    library\n  } = useActiveWeb3React();\n  const lastBlockNumber = useBlockNumber();\n  const dispatch = useDispatch();\n  const state = useSelector(s => s.transactions); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  const transactions = chainId ? (_state$chainId = state[chainId]) !== null && _state$chainId !== void 0 ? _state$chainId : {} : {}; // show popup on confirm\n\n  const addPopup = useAddPopup();\n  useEffect(() => {\n    if (!chainId || !library || !lastBlockNumber) return;\n    Object.keys(transactions).filter(hash => shouldCheck(lastBlockNumber, transactions[hash])).forEach(hash => {\n      library.getTransactionReceipt(hash).then(receipt => {\n        if (receipt) {\n          var _transactions$hash;\n\n          dispatch(finalizeTransaction({\n            chainId,\n            hash,\n            receipt: {\n              blockHash: receipt.blockHash,\n              blockNumber: receipt.blockNumber,\n              contractAddress: receipt.contractAddress,\n              from: receipt.from,\n              status: receipt.status,\n              to: receipt.to,\n              transactionHash: receipt.transactionHash,\n              transactionIndex: receipt.transactionIndex\n            }\n          }));\n          addPopup({\n            txn: {\n              hash,\n              success: receipt.status === 1,\n              summary: (_transactions$hash = transactions[hash]) === null || _transactions$hash === void 0 ? void 0 : _transactions$hash.summary\n            }\n          }, hash);\n        } else {\n          dispatch(checkedTransaction({\n            chainId,\n            hash,\n            blockNumber: lastBlockNumber\n          }));\n        }\n      }).catch(error => {\n        console.error(`failed to check transaction hash: ${hash}`, error);\n      });\n    });\n  }, [chainId, library, transactions, lastBlockNumber, dispatch, addPopup]);\n  return null;\n}\n\n_s(Updater, \"H6IOjWBNbZ0ETCS0dEYz0IeAtQE=\", false, function () {\n  return [useActiveWeb3React, useBlockNumber, useDispatch, useSelector, useAddPopup];\n});\n\n_c = Updater;\n\nvar _c;\n\n$RefreshReg$(_c, \"Updater\");","map":{"version":3,"sources":["C:/PROYECTOS/CACAO-swap/src/state/transactions/updater.tsx"],"names":["useEffect","useDispatch","useSelector","useActiveWeb3React","useAddPopup","useBlockNumber","checkedTransaction","finalizeTransaction","shouldCheck","lastBlockNumber","tx","receipt","lastCheckedBlockNumber","blocksSinceCheck","minutesPending","Date","getTime","addedTime","Updater","chainId","library","dispatch","state","s","transactions","addPopup","Object","keys","filter","hash","forEach","getTransactionReceipt","then","blockHash","blockNumber","contractAddress","from","status","to","transactionHash","transactionIndex","txn","success","summary","catch","error","console"],"mappings":"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","sourcesContent":["import { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useActiveWeb3React } from '../../hooks'\r\nimport { useAddPopup, useBlockNumber } from '../application/hooks'\r\nimport { AppDispatch, AppState } from '../index'\r\nimport { checkedTransaction, finalizeTransaction } from './actions'\r\n\r\nexport function shouldCheck(\r\n  lastBlockNumber: number,\r\n  tx: { addedTime: number; receipt?: any; lastCheckedBlockNumber?: number }\r\n): boolean {\r\n  if (tx.receipt) return false\r\n  if (!tx.lastCheckedBlockNumber) return true\r\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber\r\n  if (blocksSinceCheck < 1) return false\r\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60\r\n  if (minutesPending > 60) {\r\n    // every 10 blocks if pending for longer than an hour\r\n    return blocksSinceCheck > 9\r\n  }\r\n  if (minutesPending > 5) {\r\n    // every 3 blocks if pending more than 5 minutes\r\n    return blocksSinceCheck > 2\r\n  }\r\n  // otherwise every block\r\n  return true\r\n}\r\n\r\nexport default function Updater(): null {\r\n  const { chainId, library } = useActiveWeb3React()\r\n\r\n  const lastBlockNumber = useBlockNumber()\r\n\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const state = useSelector<AppState, AppState['transactions']>((s) => s.transactions)\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const transactions = chainId ? state[chainId] ?? {} : {}\r\n\r\n  // show popup on confirm\r\n  const addPopup = useAddPopup()\r\n\r\n  useEffect(() => {\r\n    if (!chainId || !library || !lastBlockNumber) return\r\n\r\n    Object.keys(transactions)\r\n      .filter((hash) => shouldCheck(lastBlockNumber, transactions[hash]))\r\n      .forEach((hash) => {\r\n        library\r\n          .getTransactionReceipt(hash)\r\n          .then((receipt) => {\r\n            if (receipt) {\r\n              dispatch(\r\n                finalizeTransaction({\r\n                  chainId,\r\n                  hash,\r\n                  receipt: {\r\n                    blockHash: receipt.blockHash,\r\n                    blockNumber: receipt.blockNumber,\r\n                    contractAddress: receipt.contractAddress,\r\n                    from: receipt.from,\r\n                    status: receipt.status,\r\n                    to: receipt.to,\r\n                    transactionHash: receipt.transactionHash,\r\n                    transactionIndex: receipt.transactionIndex,\r\n                  },\r\n                })\r\n              )\r\n\r\n              addPopup(\r\n                {\r\n                  txn: {\r\n                    hash,\r\n                    success: receipt.status === 1,\r\n                    summary: transactions[hash]?.summary,\r\n                  },\r\n                },\r\n                hash\r\n              )\r\n            } else {\r\n              dispatch(checkedTransaction({ chainId, hash, blockNumber: lastBlockNumber }))\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.error(`failed to check transaction hash: ${hash}`, error)\r\n          })\r\n      })\r\n  }, [chainId, library, transactions, lastBlockNumber, dispatch, addPopup])\r\n\r\n  return null\r\n}\r\n"]},"metadata":{},"sourceType":"module"}