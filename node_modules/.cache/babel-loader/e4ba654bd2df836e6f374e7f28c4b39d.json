{"ast":null,"code":"var _process$env$REACT_AP;\n\nimport { ConnectorNames } from '@pancakeswap-libs/uikit';\nimport { Web3Provider } from '@ethersproject/providers';\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector';\nimport { BscConnector } from '@binance-chain/bsc-connector';\nimport { NetworkConnector } from './NetworkConnector';\nconst NETWORK_URL = process.env.REACT_APP_NETWORK_URL;\nexport const NETWORK_CHAIN_ID = parseInt((_process$env$REACT_AP = process.env.REACT_APP_CHAIN_ID) !== null && _process$env$REACT_AP !== void 0 ? _process$env$REACT_AP : '56');\n\nif (typeof NETWORK_URL === 'undefined') {\n  throw new Error(`REACT_APP_NETWORK_URL must be a defined environment variable`);\n}\n\nexport const network = new NetworkConnector({\n  urls: {\n    [NETWORK_CHAIN_ID]: NETWORK_URL\n  }\n});\nlet networkLibrary;\nexport function getNetworkLibrary() {\n  var _networkLibrary;\n\n  // eslint-disable-next-line no-return-assign\n  return networkLibrary = (_networkLibrary = networkLibrary) !== null && _networkLibrary !== void 0 ? _networkLibrary : new Web3Provider(network.provider);\n}\nexport const injected = new InjectedConnector({\n  supportedChainIds: [56, 97]\n});\nexport const bscConnector = new BscConnector({\n  supportedChainIds: [56]\n}); // mainnet only\n\nexport const walletconnect = new WalletConnectConnector({\n  rpc: {\n    [NETWORK_CHAIN_ID]: NETWORK_URL\n  },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: 15000\n}); // mainnet only\n\nexport const walletlink = new WalletLinkConnector({\n  url: NETWORK_URL,\n  appName: 'Uniswap',\n  appLogoUrl: 'https://mpng.pngfly.com/20181202/bex/kisspng-emoji-domain-unicorn-pin-badges-sticker-unicorn-tumblr-emoji-unicorn-iphoneemoji-5c046729264a77.5671679315437924251569.jpg'\n});\nexport const connectorsByName = {\n  [ConnectorNames.Injected]: injected,\n  [ConnectorNames.WalletConnect]: walletconnect,\n  [ConnectorNames.BSC]: bscConnector\n};","map":{"version":3,"sources":["C:/PROYECTOS/CACAO-swap/src/connectors/index.ts"],"names":["ConnectorNames","Web3Provider","InjectedConnector","WalletConnectConnector","WalletLinkConnector","BscConnector","NetworkConnector","NETWORK_URL","process","env","REACT_APP_NETWORK_URL","NETWORK_CHAIN_ID","parseInt","REACT_APP_CHAIN_ID","Error","network","urls","networkLibrary","getNetworkLibrary","provider","injected","supportedChainIds","bscConnector","walletconnect","rpc","bridge","qrcode","pollingInterval","walletlink","url","appName","appLogoUrl","connectorsByName","Injected","WalletConnect","BSC"],"mappings":";;AAAA,SAASA,cAAT,QAA+B,yBAA/B;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,sBAAT,QAAuC,qCAAvC;AACA,SAASC,mBAAT,QAAoC,kCAApC;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AAEA,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYC,qBAAhC;AAEA,OAAO,MAAMC,gBAAwB,GAAGC,QAAQ,0BAACJ,OAAO,CAACC,GAAR,CAAYI,kBAAb,yEAAmC,IAAnC,CAAzC;;AAEP,IAAI,OAAON,WAAP,KAAuB,WAA3B,EAAwC;AACtC,QAAM,IAAIO,KAAJ,CAAW,8DAAX,CAAN;AACD;;AAED,OAAO,MAAMC,OAAO,GAAG,IAAIT,gBAAJ,CAAqB;AAC1CU,EAAAA,IAAI,EAAE;AAAE,KAACL,gBAAD,GAAoBJ;AAAtB;AADoC,CAArB,CAAhB;AAIP,IAAIU,cAAJ;AACA,OAAO,SAASC,iBAAT,GAA2C;AAAA;;AAChD;AACA,SAAQD,cAAc,sBAAGA,cAAH,6DAAqB,IAAIhB,YAAJ,CAAiBc,OAAO,CAACI,QAAzB,CAA3C;AACD;AAED,OAAO,MAAMC,QAAQ,GAAG,IAAIlB,iBAAJ,CAAsB;AAC5CmB,EAAAA,iBAAiB,EAAE,CAAC,EAAD,EAAK,EAAL;AADyB,CAAtB,CAAjB;AAIP,OAAO,MAAMC,YAAY,GAAG,IAAIjB,YAAJ,CAAiB;AAAEgB,EAAAA,iBAAiB,EAAE,CAAC,EAAD;AAArB,CAAjB,CAArB,C,CAEP;;AACA,OAAO,MAAME,aAAa,GAAG,IAAIpB,sBAAJ,CAA2B;AACtDqB,EAAAA,GAAG,EAAE;AAAE,KAACb,gBAAD,GAAoBJ;AAAtB,GADiD;AAEtDkB,EAAAA,MAAM,EAAE,kCAF8C;AAGtDC,EAAAA,MAAM,EAAE,IAH8C;AAItDC,EAAAA,eAAe,EAAE;AAJqC,CAA3B,CAAtB,C,CAOP;;AACA,OAAO,MAAMC,UAAU,GAAG,IAAIxB,mBAAJ,CAAwB;AAChDyB,EAAAA,GAAG,EAAEtB,WAD2C;AAEhDuB,EAAAA,OAAO,EAAE,SAFuC;AAGhDC,EAAAA,UAAU,EACR;AAJ8C,CAAxB,CAAnB;AAOP,OAAO,MAAMC,gBAA4D,GAAG;AAC1E,GAAChC,cAAc,CAACiC,QAAhB,GAA2Bb,QAD+C;AAE1E,GAACpB,cAAc,CAACkC,aAAhB,GAAgCX,aAF0C;AAG1E,GAACvB,cAAc,CAACmC,GAAhB,GAAsBb;AAHoD,CAArE","sourcesContent":["import { ConnectorNames } from '@pancakeswap-libs/uikit'\r\nimport { Web3Provider } from '@ethersproject/providers'\r\nimport { InjectedConnector } from '@web3-react/injected-connector'\r\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\r\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector'\r\nimport { BscConnector } from '@binance-chain/bsc-connector'\r\nimport { NetworkConnector } from './NetworkConnector'\r\n\r\nconst NETWORK_URL = process.env.REACT_APP_NETWORK_URL\r\n\r\nexport const NETWORK_CHAIN_ID: number = parseInt(process.env.REACT_APP_CHAIN_ID ?? '56')\r\n\r\nif (typeof NETWORK_URL === 'undefined') {\r\n  throw new Error(`REACT_APP_NETWORK_URL must be a defined environment variable`)\r\n}\r\n\r\nexport const network = new NetworkConnector({\r\n  urls: { [NETWORK_CHAIN_ID]: NETWORK_URL },\r\n})\r\n\r\nlet networkLibrary: Web3Provider | undefined\r\nexport function getNetworkLibrary(): Web3Provider {\r\n  // eslint-disable-next-line no-return-assign\r\n  return (networkLibrary = networkLibrary ?? new Web3Provider(network.provider as any))\r\n}\r\n\r\nexport const injected = new InjectedConnector({\r\n  supportedChainIds: [56, 97],\r\n})\r\n\r\nexport const bscConnector = new BscConnector({ supportedChainIds: [56] })\r\n\r\n// mainnet only\r\nexport const walletconnect = new WalletConnectConnector({\r\n  rpc: { [NETWORK_CHAIN_ID]: NETWORK_URL },\r\n  bridge: 'https://bridge.walletconnect.org',\r\n  qrcode: true,\r\n  pollingInterval: 15000,\r\n})\r\n\r\n// mainnet only\r\nexport const walletlink = new WalletLinkConnector({\r\n  url: NETWORK_URL,\r\n  appName: 'Uniswap',\r\n  appLogoUrl:\r\n    'https://mpng.pngfly.com/20181202/bex/kisspng-emoji-domain-unicorn-pin-badges-sticker-unicorn-tumblr-emoji-unicorn-iphoneemoji-5c046729264a77.5671679315437924251569.jpg',\r\n})\r\n\r\nexport const connectorsByName: { [connectorName in ConnectorNames]: any } = {\r\n  [ConnectorNames.Injected]: injected,\r\n  [ConnectorNames.WalletConnect]: walletconnect,\r\n  [ConnectorNames.BSC]: bscConnector,\r\n}\r\n"]},"metadata":{},"sourceType":"module"}